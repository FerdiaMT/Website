let px, py, pa, pdx, pdy; // for 158 use height / 320

let pWidth = 20;
let speed = 5;
let mapX = 8, mapY = 8, mapS = 64;
const HALFPI = Math.PI / 2;
const THREEPI = (3 * Math.PI) / 2;
const DEGREE = 0.0174533; // roughly the radian amount of a degree
let fov = 60;
let disT = 0;
const inputKey = new Array();
const HEIGHT  = 600;

function setup() {
  px = py = 280;
  pa=0;
  createCanvas(1024, 512);
  background(100);
  pdx = Math.cos(pa) * 5;
  pdy = Math.sin(pa) * 5;
}

// Declare and initialize mapW before using it
let mapW = [
  2, 2, 3, 4, 3, 2, 2, 2,
  2, 0, 2, 0, 0, 0, 0, 2,
  2, 0, 2, 0, 0, 0, 0, 2,
  2, 0, 2, 1, 0, 0, 0, 2,
  2, 0, 0, 4, 0, 0, 0, 2,
  2, 0, 0, 2, 0, 1, 0, 2,
  2, 0, 0, 2, 0, 0, 0, 2,
  2, 2, 2, 2, 2, 2, 2, 2,
];

function draw() {
  
  

  
  keyMovement();
  
  background(100);
  drawMap2D();
  rect(px - pWidth / 2, py - pWidth / 2, pWidth, pWidth); // draws player
  stroke(255, 0, 0);
  let rayX = px + (pdx * 5);
  let rayY =  py + (pdy * 5);
  line( px, py, rayX+px, rayY );
  drawRays2D();
}

function distance(ax, ay, bx, by, ang) {
  return sqrt((bx - ax) * (bx - ax) + (by - ay) * (by - ay));
}

function drawMap2D() {
  let x, y, xo, yo;
  for (y = 0; y < mapY; y++) {
    for (x = 0; x < mapX; x++) {
      if (mapW[y * mapX + x] >0) {
        fill(255);
      } else {
        fill(0);
      }
      stroke(0);
      strokeWeight(0);
      rect(x * mapS, y * mapS, mapS, mapS);
    }
  }
}

function drawRays2D() {
  let r, mx, my, mp, dof;
  let rx, ry, ra, xo, yo;
  rx = ry = ra = xo = yo = 0.0;

  ra = pa - DEGREE * fov / 2;
  if (ra < 0) {
    ra += 2 * Math.PI;
  }
  if (ra > 2 * Math.PI) {
    ra -= 2 * Math.PI;
  }

  for (r = 0; r < fov; r++) {
    let vmt = 0; 
    let hmt = 0;
    // Check horizontal lines
    dof = 0;
    let disH = 1000000, hx = px, hy = py;
    let aTan = -1/Math.tan(ra);
    if (ra > Math.PI) {
      ry = ((int(py) >> 6) << 6) - 0.0001;
      rx = (py - ry) * aTan + px;
      yo = -64;
      xo = -yo * aTan;
    }
    if (ra < Math.PI) {
      ry = ((int(py) >> 6) << 6) + 64;
      rx = (py - ry) * aTan + px;
      yo = 64;
      xo = -yo * aTan;
    }
    if (ra == 0 || ra == Math.PI) {
      rx = px;
      ry = py;
      dof = 8;
    }
    while (dof < 8) {
      mx = int(rx) >> 6;
      my = int(ry) >> 6;
      mp = my * mapX + mx;

      if (mp > 0 && mp < mapX * mapY &&  mapW[mp] >0) {
        hmt = mapW[mp]-1;
        hx = rx;
        hy = ry;
        disH = distance(px, py, hx, hy, ra);
        dof = 8;
      } else {
        rx += xo;
        ry += yo;
        dof += 1;
      }
    }

    stroke(0, 0, 255);

    // Check vertical lines
    dof = 0;
    let disV = 1000000, vx = px, vy = py;
    let nTan = -1* (Math.tan(ra));
    if (ra > HALFPI && ra < THREEPI) {
      rx = ((int(px) >> 6) << 6) - 0.0001;
      ry = (px - rx) * nTan + py;
      xo = -64;
      yo = -xo * nTan;
    }
    if (ra < HALFPI || ra > THREEPI) {
      rx = ((int(px) >> 6) << 6) + 64;
      ry = (px - rx) * nTan + py;
      xo = 64;
      yo = -xo * nTan;
    }
    if (ra == 0 || ra == Math.PI) {
      rx = px;
      ry = py;
      dof = 8;
    }
    while (dof < 8) {
      mx = int(rx) >> 6;
      my = int(ry) >> 6;
      mp = my * mapX + mx;

      if (mp < mapX * mapY && mp > 0 && mapW[mp] >0) {
        vx = rx;
        vy = ry;
        disV = distance(px, py, vx, vy, ra);
        vmt = mapW[mp]-1;
        dof = 8;
      } else {
        rx += xo;
        ry += yo;
        dof += 1;
      }
    }
    let shade =1 ;
    if (disV < disH) {
      hmt = vmt;
      rx = vx;
      ry = vy;
      disT = disV;
      shade = 0.5;
    }
    if (disH < disV) {
      rx = hx;
      ry = hy;
      disT = disH;
      shade = 1;
    }

    stroke(0, 255, 0);
    line(px, py, rx, ry);

    let ca = pa - ra;
    disT=disT*Math.cos((ca))
    if (ca < 0) {
      ca += 2 * Math.PI;
    }
    if (ca > 2 * Math.PI) {
      ca -= 2 * Math.PI;
    }
    //disT = disT * Math.cos(ca);
    
    
    
    
    let lineH = (mapS * HEIGHT) / disT;
    let ty_step= (32 / lineH);
    let ty_off = 0;
    if (lineH > HEIGHT) {
      ty_off=(lineH-HEIGHT)/2;
      lineH = HEIGHT;
    }
    let lineO = 160 - (lineH>>1);
    //rendering the raycaster

    strokeWeight(8);
    strokeCap(SQUARE);
    //stroke(0, 255 - disT / 2, 0);
    
    let ty = ty_off*ty_step+(hmt*32);
    
    let tx = 0 ;
    if(shade ===1){
      tx = Math.floor((rx/2)%32);
      if (ra> Math.PI){
        tx = 31-tx;
      }
    }else{
      tx = Math.floor((ry/2)%32);
      if (ra>Math.PI/2 && ra < (Math.PI*(3/2))){
        tx = 31-tx;
      }
    }
    
    //ty+=32;
    
    
    
    for(let y=0;y<lineH;y++){
      //line(r * 8 + 530, lineO, r * 8 + 530, lineH + lineO);
      
      let c = All_Textures[(int)(ty)*32 + tx]*shade;
      
      if(hmt === 0 )stroke(0,0,c*100); //checkboard test
      if(hmt === 1 )stroke(c*220,c*70,0); // brick
      if(hmt === 2 )stroke(c*250,c*250,250); // window
      if(hmt === 3 )stroke(c*200,c*200,c*250,); // door
      if(hmt === 4 )stroke(c*250,0,0);
      
      line(r * 8 + 530, lineO+y, r * 8 + 530, lineO+y+1);
      ty+=ty_step;
    
    }
    stroke(50)
    line(r * 8 + 530, lineO+lineH, r * 8 + 530, lineO+lineH+HEIGHT);
    
    // draw the floor
  // for(y=lineO+lineH ; y<HEIGHT; y++){
  //   let dy = y-(HEIGHT/2);
  //   tx = px/2 + cos(ra)*159;
  //   ty = px/2 + cos(ra)*159;
  //   let c = All_Textures[Math.floor(ty*32&31)*32+ Math.floor(tx)&31]*0.7;
  //   stroke(c*255);
  //   line(r * 8 + 530, y, r * 8 + 530, y+1);
  // }
    //this causes too much lag to the point a powerful pc can barely run it
    // it also doesnt work yet
    
    
    
    //stroke(110);
    //line(r * 8 + 530, lineH + lineO, r * 8 + 530, 512);

    ra += DEGREE;
    if (ra < 0) {
      ra += 2 * Math.PI;
    }
    if (ra > 2 * Math.PI) {
      ra -= 2 * Math.PI;
    }
  }
}
    function keyPressed(){
        
          if (key === 'w' ){
            inputKey[0] = 1;
          }
          if (key === 's' ){
            inputKey[1] = 1;
          }
          if (key == 'a'){
            inputKey[2] = 1; 
          }
          if (key == 'd'){
            inputKey[3] = 1;
          }
          if (key == 'e'){
            inputKey[4] = 1;
          }
         

      }
      
      function keyReleased(){
        
          if (key === 'w'){
            inputKey[0] = 0;
          }
          if (key === 's'){
            inputKey[1] = 0;
          }
          if (key === 'a' ){
            inputKey[2] = 0; 
          }
          if (key === 'd'){
            inputKey[3] = 0;
          }
          if (key == 'e'){
            inputKey[4] = 0;
          }    
      }

  function keyMovement(){
    let xo = 0; 
    if(pdx<0){
      xo=-20;
    }else{
      xo=20;
    }
    let yo = 0; 
    if(pdy<0){
      yo=-20;
    }else{
      yo=20;
    }
    let ipx = Math.floor(px/64.00); // current grid position
    let ipx_add_xo = Math.floor((px+xo)/64.00);
    let ipx_sub_xo = Math.floor((px-xo)/64.00);
    let ipy = Math.floor(py/64.00);
    let ipy_add_yo = Math.floor((py+yo)/64.00);
    let ipy_sub_yo = Math.floor((py-yo)/64.00);
    
    // w s a d
    if (inputKey[0]) {
      if(mapW[(ipy*mapX + ipx_add_xo)]===0){px+=pdx;}
      if(mapW[(ipy_add_yo* mapX + ipx)]===0){py+=pdy;}
      
      // px += pdx;
      // py += pdy;
      // print(ipx + " " +ipy + " "+ mapW[Math.ceil(ipy*mapX + ipx_add_xo)])
      
    } else if (inputKey[1]) {
       if(mapW[(ipy*mapX + ipx_sub_xo)]===0){px-=pdx;}
       if(mapW[(ipy_sub_yo* mapX + ipx)]===0){py-=pdy;}
    }
    if (inputKey[2]) {
      pa -= 0.1;
      if (pa < 0) {
        pa += 2 * Math.PI;
      }
      pdx = Math.cos(pa) * 5;
      pdy = Math.sin(pa) * 5;
    }
    if (inputKey[3]) {
      pa += 0.1;
      if (pa > 2 * Math.PI) {
        pa -= 2 * Math.PI;
      }
      pdx = Math.cos(pa) * 5;
      pdy = Math.sin(pa) * 5;
    }
    if(inputKey[4]){
      let xo = 0; 
      if(pdx<0){
        xo=-25;
      }else{
        xo=25;
      }
      let yo = 0; 
      if(pdy<0){
        yo=-25;
      }else{
        yo=25;
      }
      let ipx = Math.floor(px/64.00); // current grid position
      let ipx_add_xo = Math.floor((px+xo)/64.00);
      let ipy = Math.floor(py/64.00);
      let ipy_add_yo = Math.floor((py+yo)/64.00);
      if(mapW[(ipy_add_yo* mapX + ipx_add_xo)]===4){
        mapW[(ipy_add_yo* mapX + ipx_add_xo)]=0;
      }
    }
  }




const All_Textures=               //all 32x32 textures
[
 //Checkerboard
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,1,1,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,

 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,

 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1, 0,0,0,0,0,0,0,0, 
 //Brick
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,

 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
 //Window
 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,    
       
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 

 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,   
       
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,  
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,
 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 
 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 
 //Door
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,1,1,1,1,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,1,1,1,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,   
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,     

 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,    
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,    
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,   
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,0,0,0,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,0,0,0,1,0,0,0,  
 0,0,0,1,1,1,1,1, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 1,1,1,1,1,0,0,0,  

 0,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,1, 1,0,1,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,1,1,1,1,0,1, 1,0,1,1,1,1,0,0, 0,0,0,0,0,0,0,0,   
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,    
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0, 
 
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,  
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,     
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,   
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,  
 0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1, 1,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,   
 0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,0,         
];